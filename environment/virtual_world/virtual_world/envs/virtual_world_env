import time

import numpy as np
from math import sin, cos

import gym
from gym import error, spaces, utils
from gym.utils import seeding

from PIL import Image

class VirtualWorldEnv(gym.Env):
    
    def __init__(self):
        self.action_space = spaces.Discrete(4)
        self.world_size_x = 50
        self.world_size_y = 50
        self.reset()
        self.STEP_LIMIT = 1000
        self.sleep = 0
        
    def step(self, action):
        if action == 0 or action == 1:
            self.move(action)
        elif action == 2 or action == 3:
            self.rotate(action)
                
    
    def reward_handler(self):
        pass
    
    def sim_over(self, reward):
        pass
    
    def reset(self):
        self.world = self.load_world()
        self.agent_pos = [1,1]
        self.agent_rot = 0
        self.agent_bounding = [0, 0, 0, 0]
    
    def close(self):
        pass
    
    """
    * Este método se encarga de hacer la acción de mover hacia adelante o
    * atras respecto a la rotación del agente.
    *
    * @param action La acción a realizar.
    """
    def move(self, action):
        
        if action == 0:
            dist = 0.1
        elif action == 1:
            dist = -0.1

        self.agent_pos = self.calculate_pos(dist, self.agent_pos, self.agent_rot)
        
        self.agent_bounding = self.check_bounding(self, self.agent_pos, self.world)
    
    """
    * Este metodo realiza la acción de rotar hacia la izquierda
    * o la derecha segun la acción indicada.
    * 
    * @param action La accion a realizar.
    """  
    def rotate(self, action):
        # Si la acción es 2 gira a la derecha, por lo que la rotación
        # es positiva.
        if action == 2:
            rot = 15
        # Si la acción es 3 gira a la izquierda, por lo que la rotación
        # es negativa.
        elif action == 3:
            rot = -15
            
        # Calcula el nuevo estado del agente al rotar el agente.
        self.agent_rot = self.calculate_rot(rot, self.agent_rot)
    
    """
    * Este metodo calcula la posición del agente después de moverse
    * la distancia proporcionada hacia el angulo también proporcionado
    * y la devuelve como un arreglo de dos posiciones.
    * @param dist La distancia a moverse (positiva o negativa)
    * @param position La posición actual del agente en un arreglo de 
    * dos posiciones.
    * @param angle El angulo en que esta mirando el agente, puede ser
    * desde 0 hasta 360 grados.
    * 
    * @return La nueva posicion del agente en un arreglo con dos 
    * elementos.
    """
    @staticmethod
    def calculate_pos(self, dist, position, angle): 
        
        """
        Se calcula utilizando funciones trigonometricas, donde a = c sin(alfa) 
        y b = c cos(alfa).
        
        La posición del agente es en el angúlo alfa.
        La distancia es c.
        La nueva posición del agente es en el angúlo beta
                
        Cuadrante I respecto a la posición del agente
        Su posicion en eje x aumenta y en el eje y aumenta
        
                            a
                90° ****************** °beta
                    *              *
                    *           *
                  b *        * c
                    *     *
                    *  * 
                    * °alfa

        Cuadrante II respecto a la posición del agente
        Su posicion en eje x disminuye y en el eje y aumenta
        
                    * °beta
                    *  *
                    *     *
                  a *        * c
                    *           *
                    *              *
                    ****************** °alfa
                            b   
                                               
        Cuadrante III respecto a la posición del agente
        Su posicion en eje x disminuye y en el eje y disminuye
        
                                     * °alfa
                                  *  *
                          c    *     * 
                            *        * b
                         *           *
                      *              * 
              °beta ****************** °90
                            a    
                            
        Cuadrante IV respecto a la posición del agente
        Su posicion en eje x aumenta y en el eje y disminuye
        
                                b
              °alfa ****************** °90
                      *              *
                         *           *
                          c *        * a
                               *     *
                                  *  *
                                     * °beta
        
        """
        # El agente avanza hacia el cuadrante I si la distancia
        # es positiva, al III si es negativa
        if angle <= 90:   
            # pos x = pos x + a si dist >= 0
            # pos x = pos x - a si dist <  0
            position[0] = position[0] + (dist * sin(angle))
            # pos y = pos y + b si dist >= 0
            # pos y = pos y - b si dist < 0
            position[1] = position[1] - (dist * cos(angle))
        
        # El agente avanza hacia el cuadrante IV si la distancia
        # es positiva, al II si es negativa
        elif angle <= 180:
            # pos x = pos x + b si dist >= 0
            # pos x = pos x - b si dist <  0
            position[0] = position[0] + (dist * cos(angle-90)) 
            # pos y = pos y - a si dist >= 0
            # pos y = pos y + a si dist < 0
            position[1] = position[1] - (dist * sin(angle-90))
            
        # El agente avanza hacia el cuadrante III si la distancia
        # es positiva, al I si es negativa
        elif angle <= 270:
            # pos x = pos x - a si dist >= 0
            # pos x = pos x + a si dist < 0
            position[0] = position[0] - (dist * sin(angle - 180))
            # pos y = pos y - b si dist >= 0
            # pos y = pos y + b si dist < 0
            position[1] = position[1] - (dist * cos(angle - 180))
            
        # El agente avanza hacia el cuadrante II si la distancia
        # es positiva, al IV si es negativa
        elif angle <= 360:
            # pos x = pos x - b si dist >= 0
            # pos x = pos x + b si dist < 0
            position[0] = position[0] - (dist * cos(angle-270)) 
            position[1] = position[1] + (dist * sin(angle-270))
            
        return position
    
    """
    * Este metodo comprueba si el agente ha colisionado con algún
    * obstaculo del mundo.
    * 
    * @param agent_pos La posición del agente.
    * @param world La composición del mundo representada por un
    * arreglo, donde 0 es un espacio libre y 1 es un obstaculo.
    * 
    * @return Un arreglo que contiene los cuatro lados (adelante,
    * atras, derecha e izquierda) dando respuesta a si colisiono
    * (1) o si no (0).
    """
    @staticmethod
    def check_bounding(self, agent_pos, world):
        # Si el agente esta fuera del escenario retorna todas las
        # colisiones activadas.
        if agent_pos[0] < 0 or agent_pos[0] > len(world[0]):
            return [1,1,1,1]
        if agent_pos[1] < 0 or agent_pos[1] > len(world[1]):
            return [1,1,1,1]
        
        # Si el agente se encuentra en una posición donde hay un 
        # obstaculo se retornan todas las colisiones
        if world[int(agent_pos[0])][int(agent_pos[1])] == 1:
            return [1,1,1,1]
        
        # En caso de que no, no se retornan colisiones
        else:
            return [0,0,0,0]
    
    """
    * Este metodo calcula la nueva rotación del agente en base
    * a un angúlo dado. Esta rotación puede ir de 0 a 360 grados.
    *
    * @param rot La rotación que dara el agente.
    * @param agent_rot La rotación base que tiene el agente al 
    * aplicar la nueva rotación.
    *
    * @return La nueva rotacíon del agente.
    """
    @staticmethod
    def calculate_rot(self, rot, agent_rot):
        #Se suma la rotación al agente
        new_rot = agent_rot + rot
        
        # Si esta rotacion supera 360 grados solo se toma en cuenta
        # el excedente a los 360 grados.
        if new_rot > 360:
            new_rot = new_rot - 360
        # Si la rotación es negativa entonces se le suman 360 grados
        # para obtener el estado de rotación en el sistema de 360.
        if new_rot < 0:
            new_rot = new_rot + 360
            
        return new_rot
    
    @staticmethod
    def load_world(self):
        img = Image.open("escenarios/escenario_poblado_1.png")
        imgArray = np.array(img)
        img.close()
        imgArray /= 255
        
        img2D = []
        for row in imgArray:
            nextRow = []
            for element in row:
                nextRow.append(element[0])
            img2D.append(nextRow)
        
        return img2D